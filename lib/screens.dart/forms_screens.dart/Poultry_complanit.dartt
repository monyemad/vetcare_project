

class PoultryInformationForm extends StatefulWidget {
  const PoultryInformationForm({Key? key}) : super(key: key);

  @override
  State<PoultryInformationForm> createState() => _PoultryInformationFormState();
}

class _PoultryInformationFormState extends State<PoultryInformationForm> {
  final _formKey = GlobalKey<FormState>();

  String _name = '';
  String _address = '';
  String _phone = '';
  String _location = '';
  
 
  String _animalWeight = '';
  String _complaintType = '';
  

  final List<Option> _complaintOptions = const [
    Option(value: 'health-issue', label: 'Health Issue'),
    Option(value: 'injury', label: 'Injury'),
    Option(value: 'other', label: 'Other'),
  ];

  final List<Option> _healthStatusOptions = const [
    Option(value: 'healthy', label: 'Healthy'),
    Option(value: 'sick', label: 'Sick'),
    Option(value: 'injured', label: 'Injured'),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Poultry Information Form'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
                    CustomText(text: S.of(context).name),
                const SizedBox(
                  height: 8,
                ),
                CustomTextFormField(
                  hintText: S.of(context).yourName,
                  controller: _nameController,
                  keyboardType: TextInputType.name,
                  prefixIcon: Icons.person_rounded,
                  validate: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your name';
                    }
                    return null;
                  },
                ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(
                  labelText: 'Address',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your address';
                  }
                  return null;
                },
                onSaved: (value) => _address = value!,
              ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(
                  labelText: 'Phone',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your phone number';
                  }
                  return null;
                },
                onSaved: (value) => _phone = value!,
              ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(
                  labelText: 'Location',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your location';
                  }
                  return null;
                },
                onSaved: (value) => _location = value!,
              ),
           
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(
                  labelText: 'Animal Age',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the animal age';
                  }
                  return null;
                },
                onSaved: (value) => _animalAge = value!,
              ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(
                  labelText: 'Animal Weight',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the animal weight';
                  }
                  return null;
                },
                onSaved: (value) => _animalWeight = value!,
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField(
                decoration: const InputDecoration(
                  labelText: 'Complaint Type',
                  border: OutlineInputBorder(),
                ),
                items: _complaintOptions
                    .map((option) => DropdownMenuItem(
                          child: Text(option.label),
                          value: option.value,
                        ))
                    .toList(),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a complaint type';
                  }
                  return null;
                },
                onSaved: (value) => _complaintType = value!,
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField(
                decoration: const InputDecoration(
                  labelText: 'Health Status',
                  border: OutlineInputBorder(),
                ),
                items: _healthStatusOptions
                    .map((option) => DropdownMenuItem(
                          child: Text(option.label),
                          value: option.value,
                        ))
                    .toList(),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a health status';
                  }
                  return null;
                },
                onSaved: (value) => _healthStatus = value!,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    // Handle form submission
                  }
                },
                child: const Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
